intellij {
    pluginName 'ChroMATERIAL'
    updateSinceUntilBuild true
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
            exclude 'html/**'
            exclude 'html'

            srcDir 'src'

        }
    }
}

def GROUP_CHROMATERIAL = 'ChroMATERIAL'

group 'com.facebook.rucinskic.chromaterial' //'io.github.ciscorucinski.chromaterial'
version '2.1'

def sourceDir = 'src/colors'
def intelliJColorSchemeDir = "C:\\Users\\Christopher\\.Idea${intellij.type}${intellij.version}\\config\\colors"

def contentIndex = "        "
def tagIndex = "  "

def htmlFixer = {f -> file(f).text
        .replace('\n', "\n${contentIndex}")     // Add indentation to make plugin.xml look good
        .trim()
        .replace('<html>', '\n')
        .replace("</html>", "\n${tagIndex}")
}

patchPluginXml {

    pluginId 'com.facebook.rucinskic.chromaterial'
    version project['version'] // Plugin version
    sinceBuild '131'
    untilBuild '999.*'

    pluginDescription htmlFixer('resources/html/pluginDescription.html')
    changeNotes htmlFixer('resources/html/changeLog.html')

}

verifyPlugin {

    def verifyingFile = file('resources/html/changeLog.html')

    def startIndex = verifyingFile.text.indexOf("<h2>v")
    def endIndex = verifyingFile.text.indexOf("</h2>")

    def fileVersion = verifyingFile.text.substring(startIndex + 5, endIndex)

    println("\tExpected ChangeLog Version Text - ${project['version']}")
    println("\tMost Recent Updated Version     - ${fileVersion}")

    if (!(fileVersion == "${project['version']}")) {
        throw new GradleException("Verification Error :: Plugin version is out-of-date.\nPlease add the correct version information to `${verifyingFile.name}` (${fileVersion} --> ${project['version']})")
    }
    println("Plugin version is up-to-date")

}

publishPlugin {
    username usernameJetBrainPluginRepo
    password passwordJetBrainPluginRepo
//    channels 'eap'
    distributionFile 'ChroMATERIAL.jar'
}

task copyGeneratedLibs() {

    group GROUP_CHROMATERIAL

    finalizedBy "copyJar_v${project['version']}"
    finalizedBy "copyJars_All"
    finalizedBy "copyPatchedPluginXML"

}

task syncFiles(type: Copy) {

    group GROUP_CHROMATERIAL
    description "Syncronizes the original color scheme files from IntelliJ IDEA into the project and changes the extension to be xml"

    into sourceDir
    from intelliJColorSchemeDir, {
        rename 'ChroMATERIAL IntelliJ IDEA.icls', 'ChroMATERIAL.xml'
        rename '(.*)\\.icls$', '$1.xml'
    }

    doLast {
        println("Syncing and renaming files...\n\tfrom\t'$intelliJColorSchemeDir' \n\tinto\t'$sourceDir'")
    }

}

task renameFiles {

    group GROUP_CHROMATERIAL
    description "Changes the '.icls' file extension of any file in the source directory to '.xml'."

    doLast {
        ant.move(todir: sourceDir) {
            ant.fileset(dir: sourceDir)
            ant.mapper {
                ant.globmapper(from: 'ChroMATERIAL IntelliJ IDEA.icls', to: 'ChroMATERIAL.xml')
                ant.globmapper(from: "*.icls", to: "*.xml")
            }

        }
    }
}

tasks.create(name: "copyJar_v${project['version']}") {

    group GROUP_CHROMATERIAL

    def mostCurrentJarFile = "ChroMATERIAL-${project['version']}.jar"

    copy {
        into '/'
        from 'build/libs', {
            include mostCurrentJarFile
            rename mostCurrentJarFile, 'ChroMATERIAL.jar'
        }
    }

}

task copyJars_All(type: Copy) {

    group GROUP_CHROMATERIAL

    into 'libs/'
    from 'build/libs'
}

task copyPatchedPluginXML(type: Copy) {

    group GROUP_CHROMATERIAL

    into 'resources/META-INF/'
    from 'build/patchedPluginXmlFiles' include 'plugin.xml'
}

build.dependsOn renameFiles
clean.dependsOn renameFiles
buildPlugin.dependsOn renameFiles
buildPlugin.finalizedBy copyGeneratedLibs